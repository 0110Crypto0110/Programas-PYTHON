# -*- coding: utf-8 -*-
'''

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LIlBoeltEjVc6d2EwpznwpxIPr6IGn8e

'''

def gauss(a, b):
    n = len(b)  # Tamanho do vetor b, que representa o número de equações no sistema
    det = 1  # Inicializa o determinante com 1

    # Iteração sobre as colunas (k) da matriz, exceto a última
    for k in range(n - 1):
        pivot = a[k][k]  # Elemento da diagonal principal, usado como pivô

        # Iteração sobre as linhas (i) abaixo da diagonal principal
        for i in range(k + 1, n):
            factor = a[i][k] / pivot  # Fator multiplicador para zerar os elementos abaixo do pivô

            # Iteração sobre as colunas (j) da linha atual (i)
            for j in range(k, n):
                a[i][j] = a[i][j] - factor * a[k][j]  # Atualiza os elementos da linha usando o fator multiplicador
            b[i] = b[i] - factor * b[k]  # Atualiza os elementos do vetor b

    # Calcula o determinante multiplicando os elementos da diagonal principal
    for k in range(n):
        det *= a[k][k]

    return a, b, det

def hilbert(n):
    # Cria a matriz de Hilbert com tamanho n
    h = [[1 / ((i + 1) + (j + 1) - 1) for i in range(n)] for j in range(n)]
    # Calcula o vetor b, que é a soma das linhas da matriz de Hilbert
    b = [sum(row) for row in h]
    return h, b

# Testando com n = 3
h, b = hilbert(3)
resultado = gauss(h, b)

# Imprime o resultado
print("Matriz A após eliminação de Gauss:")
for linha in resultado[0]:
    print(linha)
print()
print("Vetor b após eliminação de Gauss:", resultado[1])
print()
print("Determinante:", resultado[2])

"""# N=10"""

def gauss(a, b):
    n = len(b)  # Tamanho do vetor b, que representa o número de equações no sistema
    det = 1  # Inicializa o determinante com 1

    # Iteração sobre as colunas (k) da matriz, exceto a última
    for k in range(n - 1):
        pivot = a[k][k]  # Elemento da diagonal principal, usado como pivô

        # Iteração sobre as linhas (i) abaixo da diagonal principal
        for i in range(k + 1, n):
            factor = a[i][k] / pivot  # Fator multiplicador para zerar os elementos abaixo do pivô

            # Iteração sobre as colunas (j) da linha atual (i)
            for j in range(k, n):
                a[i][j] = a[i][j] - factor * a[k][j]  # Atualiza os elementos da linha usando o fator multiplicador
            b[i] = b[i] - factor * b[k]  # Atualiza os elementos do vetor b

    # Calcula o determinante multiplicando os elementos da diagonal principal
    for k in range(n):
        det *= a[k][k]

    return a, b, det

def hilbert(n):
    # Cria a matriz de Hilbert com tamanho n
    h = [[1 / ((i + 1) + (j + 1) - 1) for i in range(n)] for j in range(n)]
    # Calcula o vetor b, que é a soma das linhas da matriz de Hilbert
    b = [sum(row) for row in h]
    return h, b

# Testando com n = 10
h, b = hilbert(10)
resultado = gauss(h, b)

# Imprime o resultado
print("Matriz A após eliminação de Gauss:")
for linha in resultado[0]:
    print(linha)
print()
print("Vetor b após eliminação de Gauss:", resultado[1])
print()
print("Determinante:", resultado[2])

"""# n= 100"""

def gauss(a, b):
    n = len(b)  # Tamanho do vetor b, que representa o número de equações no sistema
    det = 1  # Inicializa o determinante com 1

    # Iteração sobre as colunas (k) da matriz, exceto a última
    for k in range(n - 1):
        pivot = a[k][k]  # Elemento da diagonal principal, usado como pivô

        # Iteração sobre as linhas (i) abaixo da diagonal principal
        for i in range(k + 1, n):
            factor = a[i][k] / pivot  # Fator multiplicador para zerar os elementos abaixo do pivô

            # Iteração sobre as colunas (j) da linha atual (i)
            for j in range(k, n):
                a[i][j] = a[i][j] - factor * a[k][j]  # Atualiza os elementos da linha usando o fator multiplicador
            b[i] = b[i] - factor * b[k]  # Atualiza os elementos do vetor b

    # Calcula o determinante multiplicando os elementos da diagonal principal
    for k in range(n):
        det *= a[k][k]

    return a, b, det

def hilbert(n):
    # Cria a matriz de Hilbert com tamanho n
    h = [[1 / ((i + 1) + (j + 1) - 1) for i in range(n)] for j in range(n)]
    # Calcula o vetor b, que é a soma das linhas da matriz de Hilbert
    b = [sum(row) for row in h]
    return h, b

# Testando com n = 100
h, b = hilbert(100)
resultado = gauss(h, b)

# Imprime o resultado
print("Matriz A após eliminação de Gauss:")
for linha in resultado[0]:
    print(linha)
print()
print("Vetor b após eliminação de Gauss:", resultado[1])
print()
print("Determinante:", resultado[2])

"""#3* o resultados demonstram que quanto maior for a matriz de hilbert, menor fica a determinante da matriz.

#4*
"""

import numpy as np

def hilbert(n):
    # Cria a matriz de Hilbert com tamanho n
    h = [[1 / ((i + 1) + (j + 1) - 1) for i in range(n)] for j in range(n)]
    # Calcula o vetor b, que é a soma das linhas da matriz de Hilbert
    b = [sum(linhas) for linhas in h]
    return h, b

# Testando para um valor específico de 3
n = 3
h, b = hilbert(n)
print("Matriz de Hilbert para n =", n)
print(np.array(h))
print("Vetor correspondente b:", b)
print("-")
print("-")
print("-")
# Testando para um valor específico de 10
n = 10
h, b = hilbert(n)
print("Matriz de Hilbert para n =", n)
print(np.array(h))
print("Vetor correspondente b:", b)
print("-")
print("-")
print("-")
# Testando para um valor específico de 100
n = 100
h, b = hilbert(n)
print("Matriz de Hilbert para n =", n)
print(np.array(h))
print("Vetor correspondente b:", b)