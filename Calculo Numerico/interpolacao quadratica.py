# -*- coding: utf-8 -*-
"""CN.at4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YmX7RD-iHyBqyKY1XtvA9pYDTaCToqEX
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

# define os valores do array x(graus) e y(calor especifico)
x = np.array([30, 35, 40, 45])  # graus
y = np.array([0.99826, 0.99818, 0.99828, 0.99849])  # calor especifico

# Define os novos valores
i = 37.5


# a funcao np.abs : calcula a diferenca do novo valor i com cada valor do array x
# depois a funcao np.argsort, organiza as diferencas de forma crescente. na variavel idx.
# a variavel idx e rescrita como idx[:3], que significa que ela pega as tres menores
idx = np.argsort(np.abs(x - i))
idx = idx[:3]

# Funcao que simula a interpolacao quadratica
xi = x[idx]
yi = y[idx]
coeff = np.polyfit(xi, yi, 2) # aqui xi toma os valores de x e y para criar o sitema de equacoes , O numero 2 indica que e uma funcao quadratica.
poly = np.poly1d(coeff) # A equacao e aramzenada como a variavel ploy. que e o meto np,poky1d que usa os coeficiente encontrados do sistema acima.


f = poly(i)

print("calor espcifico em 37,5:  ")
print(f)

# -----------------------------------------------------------
# Define o novo valor de calor especifico
new_y = 0.99837


# a funcao np.abs : calcula a diferenca do novo valor i com cada valor do array x
# depois a funcao np.argsort, organiza as diferencas de forma crescente. na variavel idx.
# a variavel idx e rescrita como idx[:3], que significa que ela pega as tres menores
idx = np.argsort(np.abs(y - new_y))
idx = idx[:3]

# # Funcao que simula a interpolacao quadratica
xi = x[idx]
yi = y[idx]
coeff = np.polyfit(yi, xi, 2)  # A diferenca aqui e que yi, xi torcaram de lugar, ja que quermos o oposto da funcao acima.
poly = np.poly1d(coeff)


new_x = poly(new_y)

print("temperatura com calor especifico 0.99837 :  ")
print(new_x)